package utils

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_IntToHex(t *testing.T) {
	// 0 -> 0x0
	assert.Equal(t, []uint8([]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}), IntToHex(int64(0)))
	// 1234 -> 0x4D2
	assert.Equal(t, []uint8([]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0xd2}), IntToHex(int64(1234)))
	// 12345678 -> 0xBC614E
	assert.Equal(t, []uint8([]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0xbc, 0x61, 0x4e}), IntToHex(int64(12345678)))
	// 1234567890 ->
	assert.Equal(t, []uint8([]byte{0x0, 0x0, 0x0, 0x0, 0x49, 0x96, 0x02, 0xd2}), IntToHex(int64(1234567890)))
}

func Test_ReverseBytes(t *testing.T) {
	/* 0x1, 0x2, 0x3, 0x4 -> 0x4, 0x3, 0x2, 0x1 */
	bytes1 := []byte{0x1, 0x2, 0x3, 0x4}
	ReverseBytes(bytes1)
	assert.Equal(t, []byte{0x4, 0x3, 0x2, 0x1}, bytes1)

	/* 0x0 -> 0x0 */
	bytes2 := []byte{0x0}
	ReverseBytes(bytes2)
	assert.Equal(t, []byte{0x0}, bytes2)

	/* 0x1, 0x2, 0x3 -> 0x3, 0x2, 0x1 */
	bytes3 := []byte{0x1, 0x2, 0x3}
	ReverseBytes(bytes3)
	assert.Equal(t, []byte{0x3, 0x2, 0x1}, bytes3)
}
